const mongoose = require('mongoose');
const dotenv = require('dotenv');
const Household = require('../models/householdModel');
const Resident = require('../models/residentModel');
const Payment = require('../models/paymentModel');
const Fee = require('../models/feeModel');
const User = require('../models/userModel');

dotenv.config();

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/bluemoon_apartment')
    .then(async () => {
        console.log('üîå ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB');

        try {
            // B∆∞·ªõc 1: Ki·ªÉm tra v√† x√≥a ch·ªâ m·ª•c householdCode n·∫øu t·ªìn t·∫°i
            await fixHouseholdIndex();

            // B∆∞·ªõc 2: C·∫≠p nh·∫≠t m√¥ h√¨nh thanh to√°n ƒë·ªÉ h·ªó tr·ª£ tr∆∞·ªùng period
            await updatePaymentModel();

            // B∆∞·ªõc 3: T·∫°o ng∆∞·ªùi d√πng admin n·∫øu ch∆∞a c√≥
            await createAdminUser();

            // B∆∞·ªõc 4: T·∫°o d·ªØ li·ªáu m·∫´u
            await createMassiveTestData();

            console.log('\n‚úÖ Ho√†n th√†nh qu√° tr√¨nh thi·∫øt l·∫≠p d·ªØ li·ªáu!');
        } catch (error) {
            console.error('‚ùå L·ªói trong qu√° tr√¨nh thi·∫øt l·∫≠p d·ªØ li·ªáu:', error);
        } finally {
            await mongoose.connection.close();
            console.log('üîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
        }
    })
    .catch(err => {
        console.error('‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn MongoDB:', err);
        process.exit(1);
    });

// H√†m ki·ªÉm tra v√† x√≥a ch·ªâ m·ª•c householdCode
async function fixHouseholdIndex() {
    console.log('\nüîç ƒêang ki·ªÉm tra ch·ªâ m·ª•c householdCode...');

    try {
        // L·∫•y collection households
        const db = mongoose.connection.db;

        // Ki·ªÉm tra xem collection households c√≥ t·ªìn t·∫°i kh√¥ng
        const collections = await db.listCollections().toArray();
        const householdsExists = collections.some(col => col.name === 'households');

        if (householdsExists) {
            // Ki·ªÉm tra c√°c ch·ªâ m·ª•c hi·ªán c√≥
            const indexes = await db.collection('households').indexes();

            // T√¨m ch·ªâ m·ª•c householdCode
            const householdCodeIndex = indexes.find(index =>
                index.name === 'householdCode_1' ||
                (index.key && Object.keys(index.key).includes('householdCode'))
            );

            if (householdCodeIndex) {
                console.log('üóëÔ∏è T√¨m th·∫•y ch·ªâ m·ª•c householdCode, ƒëang x√≥a...');
                await db.command({
                    dropIndexes: 'households',
                    index: householdCodeIndex.name
                });
                console.log('‚úÖ ƒê√£ x√≥a ch·ªâ m·ª•c householdCode th√†nh c√¥ng!');
            } else {
                console.log('‚úÖ Kh√¥ng t√¨m th·∫•y ch·ªâ m·ª•c householdCode, ti·∫øp t·ª•c...');
            }
        } else {
            console.log('‚ÑπÔ∏è Collection households ch∆∞a t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc n√†y.');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi ki·ªÉm tra/x√≥a ch·ªâ m·ª•c:', error);
    }
}

// H√†m c·∫≠p nh·∫≠t m√¥ h√¨nh thanh to√°n ƒë·ªÉ h·ªó tr·ª£ tr∆∞·ªùng period
async function updatePaymentModel() {
    console.log('\nüîÑ ƒêang c·∫≠p nh·∫≠t m√¥ h√¨nh thanh to√°n...');

    try {
        // L·∫•y collection payments
        const db = mongoose.connection.db;
        const collections = await db.listCollections({ name: 'payments' }).toArray();

        if (collections.length > 0) {
            console.log('üîç ƒêang ki·ªÉm tra v√† c·∫≠p nh·∫≠t ch·ªâ m·ª•c cho collection payments...');

            // Ki·ªÉm tra c√°c ch·ªâ m·ª•c hi·ªán c√≥
            const indexes = await db.collection('payments').indexes();

            // T√¨m ch·ªâ m·ª•c c≈© (fee_household)
            const oldIndex = indexes.find(index =>
                index.name === 'fee_1_household_1' ||
                (index.key && index.key.fee === 1 && index.key.household === 1 && !index.key.period)
            );

            if (oldIndex) {
                console.log('üóëÔ∏è T√¨m th·∫•y ch·ªâ m·ª•c c≈© fee_household, ƒëang x√≥a...');
                await db.collection('payments').dropIndex(oldIndex.name);
                console.log('‚úÖ ƒê√£ x√≥a ch·ªâ m·ª•c c≈© th√†nh c√¥ng!');
            }

            // T·∫°o ch·ªâ m·ª•c m·ªõi bao g·ªìm tr∆∞·ªùng period
            console.log('üîß ƒêang t·∫°o ch·ªâ m·ª•c m·ªõi fee_household_period...');
            await db.collection('payments').createIndex(
                { fee: 1, household: 1, period: 1 },
                { unique: true }
            );
            console.log('‚úÖ ƒê√£ t·∫°o ch·ªâ m·ª•c m·ªõi th√†nh c√¥ng!');

            // C·∫≠p nh·∫≠t c√°c b·∫£n ghi hi·ªán c√≥ ƒë·ªÉ th√™m tr∆∞·ªùng period n·∫øu ch∆∞a c√≥
            console.log('üîÑ ƒêang c·∫≠p nh·∫≠t c√°c b·∫£n ghi thanh to√°n hi·ªán c√≥...');
            const result = await db.collection('payments').updateMany(
                { period: { $exists: false } },
                [{
                    $set: {
                        period: {
                            $cond: {
                                if: { $eq: ["$paymentDate", null] },
                                then: null,
                                else: {
                                    $dateFromParts: {
                                        year: { $year: "$paymentDate" },
                                        month: { $month: "$paymentDate" },
                                        day: 1
                                    }
                                }
                            }
                        }
                    }
                }]
            );

            console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} b·∫£n ghi thanh to√°n v·ªõi tr∆∞·ªùng period`);
        } else {
            console.log('‚ÑπÔ∏è Collection payments ch∆∞a t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc n√†y.');
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t m√¥ h√¨nh thanh to√°n:', error);
    }
}

// H√†m t·∫°o ng∆∞·ªùi d√πng admin
async function createAdminUser() {
    console.log('\nüë§ ƒêang ki·ªÉm tra ng∆∞·ªùi d√πng admin...');

    try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
        const adminExists = await User.findOne({ role: 'admin' });

        if (adminExists) {
            console.log('‚úÖ Ng∆∞·ªùi d√πng admin ƒë√£ t·ªìn t·∫°i:', adminExists.email);
            return;
        }

        // T·∫°o ng∆∞·ªùi d√πng admin m·ªõi
        const adminUser = new User({
            name: 'Admin',
            email: 'admin@bluemoon.com',
            password: 'admin123',
            role: 'admin'
        });

        await adminUser.save();
        console.log('‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi d√πng admin m·ªõi:', adminUser.email);

        // T·∫°o th√™m m·ªôt s·ªë ng∆∞·ªùi d√πng kh√°c
        const users = [
            {
                name: 'Qu·∫£n l√Ω',
                email: 'manager@bluemoon.com',
                password: 'manager123',
                role: 'manager'
            },
            {
                name: 'K·∫ø to√°n',
                email: 'accountant@bluemoon.com',
                password: 'accountant123',
                role: 'accountant'
            },
            {
                name: 'Nh√¢n vi√™n',
                email: 'staff@bluemoon.com',
                password: 'staff123',
                role: 'staff'
            }
        ];

        for (const user of users) {
            const userExists = await User.findOne({ email: user.email });
            if (!userExists) {
                const newUser = new User(user);
                await newUser.save();
                console.log(`‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi d√πng ${user.role}:`, user.email);
            }
        }
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o ng∆∞·ªùi d√πng admin:', error);
        throw error;
    }
}

// H√†m t·∫°o d·ªØ li·ªáu m·∫´u
async function createMassiveTestData() {
    console.log('\nüöÄ B·∫Øt ƒë·∫ßu t·∫°o d·ªØ li·ªáu test...');

    try {
        // T·∫°o lo·∫°i ph√≠ n·∫øu ch∆∞a c√≥
        await createFees();

        // T·∫°o 50 h·ªô gia ƒë√¨nh m·ªõi
        console.log('üìã T·∫°o h·ªô gia ƒë√¨nh...');
        const householdsToCreate = [];

        // T·∫°o 50 h·ªô gia ƒë√¨nh t·ª´ t·∫ßng 1-10, m·ªói t·∫ßng 5 cƒÉn h·ªô
        for (let floor = 1; floor <= 10; floor++) {
            for (let unit = 1; unit <= 5; unit++) {
                const apartmentNumber = `${String.fromCharCode(64 + floor)}${unit.toString().padStart(2, '0')}`;

                householdsToCreate.push({
                    apartmentNumber: apartmentNumber,
                    address: `CƒÉn h·ªô ${apartmentNumber}, Chung c∆∞ BlueMoon, Qu·∫≠n ${Math.floor(Math.random() * 12) + 1}, TP.HCM`,
                    note: `H·ªô gia ƒë√¨nh ${apartmentNumber} - Ng√†y t·∫°o: ${new Date().toLocaleDateString('vi-VN')}`,
                    active: true
                });
            }
        }

        // X√≥a h·ªô gia ƒë√¨nh c≈© (tr·ª´ 3 h·ªô ƒë·∫ßu ti√™n)
        await Household.deleteMany({
            apartmentNumber: { $not: { $in: ['A101', 'B202', 'C303'] } }
        });

        const households = await Household.insertMany(householdsToCreate);
        console.log(`‚úÖ ƒê√£ t·∫°o ${households.length} h·ªô gia ƒë√¨nh m·ªõi`);

        // L·∫•y t·∫•t c·∫£ h·ªô gia ƒë√¨nh (bao g·ªìm c≈© v√† m·ªõi)
        const allHouseholds = await Household.find({ active: true });
        console.log(`üìä T·ªïng s·ªë h·ªô gia ƒë√¨nh: ${allHouseholds.length}`);

        // T·∫°o c∆∞ d√¢n cho m·ªói h·ªô gia ƒë√¨nh
        console.log('üë• T·∫°o c∆∞ d√¢n...');
        const residentsToCreate = [];

        for (const household of allHouseholds) {
            // M·ªói h·ªô gia ƒë√¨nh c√≥ 2-5 c∆∞ d√¢n
            const numResidents = Math.floor(Math.random() * 4) + 2;
            const relationships = ['Ch·ªß h·ªô', 'V·ª£/Ch·ªìng', 'Con', 'Con', 'Cha/M·∫π'];

            for (let i = 0; i < numResidents; i++) {
                const isMale = Math.random() > 0.5;
                const age = Math.floor(Math.random() * 60) + 20;
                const names = isMale
                    ? ['Nguy·ªÖn VƒÉn', 'Tr·∫ßn VƒÉn', 'L√™ VƒÉn', 'Ph·∫°m VƒÉn', 'Ho√†ng VƒÉn', 'Hu·ª≥nh VƒÉn', 'Phan VƒÉn', 'V≈© VƒÉn']
                    : ['Nguy·ªÖn Th·ªã', 'Tr·∫ßn Th·ªã', 'L√™ Th·ªã', 'Ph·∫°m Th·ªã', 'Ho√†ng Th·ªã', 'Hu·ª≥nh Th·ªã', 'Phan Th·ªã', 'V≈© Th·ªã'];
                const lastNames = ['An', 'B√¨nh', 'C∆∞·ªùng', 'D≈©ng', 'H·∫£i', 'Khoa', 'Long', 'Nam', 'Quang', 'Tu·∫•n', 'Vi·ªát', 'Xu√¢n'];

                const fullName = `${names[Math.floor(Math.random() * names.length)]} ${lastNames[Math.floor(Math.random() * lastNames.length)]}`;

                residentsToCreate.push({
                    household: household._id,
                    fullName: fullName,
                    dateOfBirth: new Date(new Date().getFullYear() - age, Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
                    gender: isMale ? 'male' : 'female',
                    nationalId: `${Math.floor(Math.random() * 900000000) + 100000000}${Math.floor(Math.random() * 100)}`,
                    phone: `09${Math.floor(Math.random() * 90000000) + 10000000}`,
                    email: `${fullName.toLowerCase().replace(/\s+/g, '').replace(/[^a-z]/g, '')}@email.com`,
                    relationshipToOwner: relationships[i] || 'Kh√°c',
                    moveInDate: new Date(2020 + Math.floor(Math.random() * 4), Math.floor(Math.random() * 12), Math.floor(Math.random() * 28) + 1),
                    active: true
                });
            }
        }

        // X√≥a c∆∞ d√¢n c≈© (tr·ª´ nh·ªØng c∆∞ d√¢n c·ªßa 3 h·ªô ƒë·∫ßu ti√™n)
        const oldHouseholdIds = (await Household.find({
            apartmentNumber: { $in: ['A101', 'B202', 'C303'] }
        })).map(h => h._id);

        await Resident.deleteMany({
            household: { $not: { $in: oldHouseholdIds } }
        });

        const residents = await Resident.insertMany(residentsToCreate);
        console.log(`‚úÖ ƒê√£ t·∫°o ${residents.length} c∆∞ d√¢n m·ªõi`);

        // L·∫•y t·∫•t c·∫£ c∆∞ d√¢n
        const allResidents = await Resident.find({ active: true });
        console.log(`üìä T·ªïng s·ªë c∆∞ d√¢n: ${allResidents.length}`);

        // T·∫°o thanh to√°n cho 6 th√°ng g·∫ßn nh·∫•t
        console.log('üí∞ T·∫°o thanh to√°n...');
        const fees = await Fee.find({ active: true });
        const paymentsToCreate = [];

        // T·∫°o thanh to√°n cho 6 th√°ng g·∫ßn nh·∫•t
        for (let monthOffset = 5; monthOffset >= 0; monthOffset--) {
            const paymentMonth = new Date();
            paymentMonth.setMonth(paymentMonth.getMonth() - monthOffset);

            console.log(`üìÖ T·∫°o thanh to√°n cho th√°ng ${paymentMonth.getMonth() + 1}/${paymentMonth.getFullYear()}`);

            // T·ª∑ l·ªá thanh to√°n kh√°c nhau cho t·ª´ng th√°ng
            let paymentRate;
            if (monthOffset === 1) {
                // Th√°ng 5 (th√°ng tr∆∞·ªõc): ch·ªâ 50-60% h·ªô gia ƒë√¨nh thanh to√°n ƒë·ªÉ t·∫°o nhi·ªÅu kho·∫£n n·ª£
                paymentRate = 0.5 + Math.random() * 0.1;
            } else if (monthOffset === 0) {
                // Th√°ng 6 (th√°ng hi·ªán t·∫°i): 70-80% h·ªô gia ƒë√¨nh thanh to√°n
                paymentRate = 0.7 + Math.random() * 0.1;
            } else {
                // C√°c th√°ng tr∆∞·ªõc ƒë√≥: 80-95% h·ªô gia ƒë√¨nh thanh to√°n
                paymentRate = 0.8 + Math.random() * 0.15;
            }

            // Ch·ªçn ng·∫´u nhi√™n h·ªô gia ƒë√¨nh thanh to√°n theo t·ª∑ l·ªá
            const payingHouseholds = allHouseholds
                .sort(() => 0.5 - Math.random())
                .slice(0, Math.floor(allHouseholds.length * paymentRate));

            for (const household of payingHouseholds) {
                // M·ªói h·ªô thanh to√°n 3-7 lo·∫°i ph√≠ ng·∫´u nhi√™n
                const numPayments = Math.floor(Math.random() * 5) + 3;
                const selectedFees = fees.sort(() => 0.5 - Math.random()).slice(0, numPayments);

                for (const fee of selectedFees) {
                    // T·∫°o ng√†y thanh to√°n ng·∫´u nhi√™n trong th√°ng
                    let paymentDate;

                    // N·∫øu l√† th√°ng hi·ªán t·∫°i, ƒë·∫£m b·∫£o ng√†y thanh to√°n <= 6 (n·∫øu th√°ng hi·ªán t·∫°i l√† th√°ng 6)
                    if (monthOffset === 0 && paymentMonth.getMonth() === 5) { // Th√°ng 6 (index 5)
                        paymentDate = new Date(
                            paymentMonth.getFullYear(),
                            paymentMonth.getMonth(),
                            Math.floor(Math.random() * 6) + 1 // Ng√†y 1-6
                        );
                    } else {
                        paymentDate = new Date(
                            paymentMonth.getFullYear(),
                            paymentMonth.getMonth(),
                            Math.floor(Math.random() * 28) + 1
                        );
                    }

                    // T·∫°o period (ng√†y 1 c·ªßa th√°ng)
                    const period = new Date(
                        paymentMonth.getFullYear(),
                        paymentMonth.getMonth(),
                        1
                    );

                    // T·∫°o s·ªë ti·ªÅn v·ªõi bi·∫øn ƒë·ªông ¬±30%
                    const baseAmount = fee.amount || 500000;
                    const variance = 0.7 + Math.random() * 0.6; // 0.7 - 1.3
                    const amount = Math.floor((baseAmount * variance) / 10000) * 10000;

                    // T·∫°o status cho thanh to√°n
                    let status;
                    if (monthOffset === 1) {
                        // Th√°ng 5 (th√°ng tr∆∞·ªõc): 90% ƒë√£ thanh to√°n, 10% qu√° h·∫°n
                        status = Math.random() < 0.9 ? 'paid' : 'overdue';
                    } else if (monthOffset === 0) {
                        // Th√°ng 6 (th√°ng hi·ªán t·∫°i): 90% ƒë√£ thanh to√°n, 10% ƒëang ch·ªù
                        status = Math.random() < 0.9 ? 'paid' : 'pending';
                    } else {
                        // C√°c th√°ng tr∆∞·ªõc: 90% ƒë√£ thanh to√°n, 10% qu√° h·∫°n
                        status = Math.random() < 0.9 ? 'paid' : 'overdue';
                    }

                    paymentsToCreate.push({
                        household: household._id,
                        fee: fee._id,
                        amount: amount,
                        paymentDate: paymentDate,
                        period: period,
                        method: ['cash', 'bank_transfer', 'card', 'other'][Math.floor(Math.random() * 4)],
                        status: status,
                        note: ''
                    });
                }
            }

            // ƒê·ªëi v·ªõi c√°c h·ªô gia ƒë√¨nh kh√¥ng n·∫±m trong danh s√°ch thanh to√°n, t·∫°o c√°c kho·∫£n n·ª£
            if (monthOffset === 1) { // Ch·ªâ t·∫°o n·ª£ cho th√°ng 5 (th√°ng tr∆∞·ªõc)
                const nonPayingHouseholds = allHouseholds.filter(
                    h => !payingHouseholds.some(ph => ph._id.toString() === h._id.toString())
                );

                // ƒê·∫£m b·∫£o c√≥ √≠t nh·∫•t 20% h·ªô gia ƒë√¨nh c√≥ n·ª£ ph√≠ qu·∫£n l√Ω h√†ng th√°ng
                const managementFee = fees.find(fee => fee.name === 'Ph√≠ qu·∫£n l√Ω h√†ng th√°ng' || fee.feeCode === 'PHI001');

                if (managementFee) {
                    const overdueHouseholds = nonPayingHouseholds.slice(0, Math.max(5, Math.floor(allHouseholds.length * 0.2)));

                    for (const household of overdueHouseholds) {
                        // T·∫°o kho·∫£n n·ª£ ph√≠ qu·∫£n l√Ω
                        paymentsToCreate.push({
                            household: household._id,
                            fee: managementFee._id,
                            amount: managementFee.amount,
                            paymentDate: null, // Kh√¥ng c√≥ ng√†y thanh to√°n v√¨ ch∆∞a thanh to√°n
                            period: new Date(new Date().getFullYear(), 4, 1), // Th√°ng 5 (index 4)
                            method: null,
                            status: 'overdue', // Qu√° h·∫°n
                            note: `Ph√≠ qu·∫£n l√Ω h√†ng th√°ng qu√° h·∫°n - Th√°ng 5/${new Date().getFullYear()}`
                        });

                        // Th√™m 1-2 kho·∫£n n·ª£ kh√°c
                        const otherFees = fees.filter(f => f._id.toString() !== managementFee._id.toString())
                            .sort(() => 0.5 - Math.random())
                            .slice(0, 1 + Math.floor(Math.random() * 2));

                        for (const fee of otherFees) {
                            paymentsToCreate.push({
                                household: household._id,
                                fee: fee._id,
                                amount: fee.amount,
                                paymentDate: null,
                                period: new Date(new Date().getFullYear(), 4, 1), // Th√°ng 5 (index 4)
                                method: null,
                                status: 'overdue',
                                note: `${fee.name} qu√° h·∫°n - Th√°ng 5/${new Date().getFullYear()}`
                            });
                        }
                    }
                }
            }
        }

        // Th√™m d·ªØ li·ªáu thanh to√°n c·ª• th·ªÉ cho th√°ng 6 ƒë·∫øn ng√†y 6/6
        console.log('üí∞ Th√™m d·ªØ li·ªáu thanh to√°n c·ª• th·ªÉ cho th√°ng 6 ƒë·∫øn ng√†y 6/6...');

        // ƒê·∫£m b·∫£o m·ªçi h·ªô gia ƒë√¨nh ƒë·ªÅu c√≥ thanh to√°n ph√≠ qu·∫£n l√Ω h√†ng th√°ng
        const managementFee = fees.find(fee => fee.name === 'Ph√≠ qu·∫£n l√Ω h√†ng th√°ng' || fee.feeCode === 'PHI001');

        if (managementFee) {
            for (const household of allHouseholds) {
                // Ki·ªÉm tra xem h·ªô gia ƒë√¨nh ƒë√£ c√≥ thanh to√°n ph√≠ qu·∫£n l√Ω th√°ng 6 ch∆∞a
                const existingPayment = paymentsToCreate.find(p =>
                    p.household.toString() === household._id.toString() &&
                    p.fee.toString() === managementFee._id.toString() &&
                    p.paymentDate && // ƒê·∫£m b·∫£o c√≥ ng√†y thanh to√°n
                    p.paymentDate.getMonth() === 5 && // Th√°ng 6 (index 5)
                    p.paymentDate.getFullYear() === new Date().getFullYear()
                );

                if (!existingPayment) {
                    // Th√™m thanh to√°n ph√≠ qu·∫£n l√Ω cho th√°ng 6
                    paymentsToCreate.push({
                        household: household._id,
                        fee: managementFee._id,
                        amount: managementFee.amount,
                        paymentDate: new Date(new Date().getFullYear(), 5, Math.floor(Math.random() * 6) + 1), // Ng√†y 1-6 th√°ng 6
                        period: new Date(new Date().getFullYear(), 5, 1),
                        method: ['cash', 'bank_transfer'][Math.floor(Math.random() * 2)],
                        status: 'paid', // Ch·ªâ c√≥ tr·∫°ng th√°i ƒë√£ thanh to√°n ho·∫∑c ƒëang ch·ªù
                        note: `Thanh to√°n ph√≠ qu·∫£n l√Ω h√†ng th√°ng - Th√°ng 6/${new Date().getFullYear()}`
                    });
                }
            }
        }

        // T·∫°o t√¨nh hu·ªëng ƒë·∫∑c bi·ªát: H·ªô gia ƒë√¨nh ƒë√£ thanh to√°n th√°ng 6 nh∆∞ng c√≤n n·ª£ th√°ng 5
        // ƒê√¢y l√† t√¨nh hu·ªëng c·∫ßn thi·∫øt ƒë·ªÉ test ch·ª©c nƒÉng "Thanh to√°n n·ª£"
        console.log('üí∞ T·∫°o t√¨nh hu·ªëng ƒë·∫∑c bi·ªát: H·ªô ƒë√£ thanh to√°n th√°ng 6 nh∆∞ng c√≤n n·ª£ th√°ng 5...');

        // Ch·ªçn 30% h·ªô gia ƒë√¨nh ƒë·ªÉ t·∫°o t√¨nh hu·ªëng ƒë·∫∑c bi·ªát n√†y
        const specialCaseHouseholds = allHouseholds
            .sort(() => 0.5 - Math.random())
            .slice(0, Math.floor(allHouseholds.length * 0.3));

        for (const household of specialCaseHouseholds) {
            // ƒê·∫£m b·∫£o h·ªô n√†y ƒë√£ thanh to√°n ph√≠ qu·∫£n l√Ω th√°ng 6
            const june6Payment = paymentsToCreate.find(p =>
                p.household.toString() === household._id.toString() &&
                p.fee.toString() === managementFee._id.toString() &&
                p.paymentDate &&
                p.paymentDate.getMonth() === 5 && // Th√°ng 6 (index 5)
                p.paymentDate.getFullYear() === new Date().getFullYear() &&
                p.status === 'paid'
            );

            if (june6Payment) {
                // Ki·ªÉm tra xem ƒë√£ c√≥ kho·∫£n n·ª£ th√°ng 5 ch∆∞a
                const may5Payment = paymentsToCreate.find(p =>
                    p.household.toString() === household._id.toString() &&
                    p.fee.toString() === managementFee._id.toString() &&
                    ((p.paymentDate && p.paymentDate.getMonth() === 4) || // Th√°ng 5 (index 4)
                        (p.note && p.note.includes('Th√°ng 5/')))
                );

                // N·∫øu ch∆∞a c√≥ kho·∫£n n·ª£ th√°ng 5, t·∫°o m·ªõi
                if (!may5Payment) {
                    paymentsToCreate.push({
                        household: household._id,
                        fee: managementFee._id,
                        amount: managementFee.amount,
                        paymentDate: null, // Kh√¥ng c√≥ ng√†y thanh to√°n v√¨ ch∆∞a thanh to√°n
                        period: new Date(new Date().getFullYear(), 4, 1), // Th√°ng 5 (index 4)
                        method: null,
                        status: 'overdue', // Qu√° h·∫°n
                        note: `Ph√≠ qu·∫£n l√Ω h√†ng th√°ng qu√° h·∫°n - Th√°ng 5/${new Date().getFullYear()}`
                    });

                    console.log(`‚úÖ ƒê√£ t·∫°o kho·∫£n n·ª£ th√°ng 5 cho h·ªô ${household.apartmentNumber}`);
                }
                // N·∫øu ƒë√£ c√≥ kho·∫£n thanh to√°n th√°ng 5 nh∆∞ng kh√¥ng ph·∫£i qu√° h·∫°n, chuy·ªÉn th√†nh qu√° h·∫°n
                else if (may5Payment.status !== 'overdue') {
                    may5Payment.status = 'overdue';
                    may5Payment.paymentDate = null;
                    may5Payment.period = new Date(new Date().getFullYear(), 4, 1); // Th√°ng 5 (index 4)
                    may5Payment.method = null;
                    may5Payment.note = `Ph√≠ qu·∫£n l√Ω h√†ng th√°ng qu√° h·∫°n - Th√°ng 5/${new Date().getFullYear()}`;

                    console.log(`‚úÖ ƒê√£ chuy·ªÉn kho·∫£n thanh to√°n th√°ng 5 th√†nh qu√° h·∫°n cho h·ªô ${household.apartmentNumber}`);
                }

                // Th√™m c√°c kho·∫£n n·ª£ kh√°c cho th√°ng 5
                // Ch·ªçn 2-3 lo·∫°i ph√≠ kh√°c ƒë·ªÉ t·∫°o kho·∫£n n·ª£
                const otherFees = fees.filter(f => f._id.toString() !== managementFee._id.toString())
                    .sort(() => 0.5 - Math.random())
                    .slice(0, 2 + Math.floor(Math.random() * 2)); // 2-3 lo·∫°i ph√≠

                for (const fee of otherFees) {
                    // Ki·ªÉm tra xem ƒë√£ c√≥ kho·∫£n n·ª£ cho lo·∫°i ph√≠ n√†y ch∆∞a
                    const existingFeePayment = paymentsToCreate.find(p =>
                        p.household.toString() === household._id.toString() &&
                        p.fee.toString() === fee._id.toString() &&
                        ((p.paymentDate && p.paymentDate.getMonth() === 4) || // Th√°ng 5 (index 4)
                            (p.note && p.note.includes('Th√°ng 5/')))
                    );

                    if (!existingFeePayment) {
                        paymentsToCreate.push({
                            household: household._id,
                            fee: fee._id,
                            amount: fee.amount,
                            paymentDate: null,
                            period: new Date(new Date().getFullYear(), 4, 1), // Th√°ng 5 (index 4)
                            method: null,
                            status: 'overdue',
                            note: `${fee.name} qu√° h·∫°n - Th√°ng 5/${new Date().getFullYear()}`
                        });

                        console.log(`‚úÖ ƒê√£ t·∫°o kho·∫£n n·ª£ ${fee.name} th√°ng 5 cho h·ªô ${household.apartmentNumber}`);
                    }
                    else if (existingFeePayment.status !== 'overdue') {
                        existingFeePayment.status = 'overdue';
                        existingFeePayment.paymentDate = null;
                        existingFeePayment.period = new Date(new Date().getFullYear(), 4, 1);
                        existingFeePayment.method = null;
                        existingFeePayment.note = `${fee.name} qu√° h·∫°n - Th√°ng 5/${new Date().getFullYear()}`;

                        console.log(`‚úÖ ƒê√£ chuy·ªÉn kho·∫£n thanh to√°n ${fee.name} th√°ng 5 th√†nh qu√° h·∫°n cho h·ªô ${household.apartmentNumber}`);
                    }
                }
            }
        }

        // Th√™m thanh to√°n ph√≠ g·ª≠i xe cho 30% h·ªô gia ƒë√¨nh
        const parkingFees = fees.filter(fee => fee.feeType === 'parking');

        if (parkingFees.length > 0) {
            const parkingHouseholds = allHouseholds
                .sort(() => 0.5 - Math.random())
                .slice(0, Math.floor(allHouseholds.length * 0.3));

            for (const household of parkingHouseholds) {
                // Ch·ªçn ng·∫´u nhi√™n 1-2 lo·∫°i ph√≠ g·ª≠i xe
                const numParkingFees = Math.min(parkingFees.length, Math.floor(Math.random() * 2) + 1);
                const selectedParkingFees = parkingFees.sort(() => 0.5 - Math.random()).slice(0, numParkingFees);

                for (const fee of selectedParkingFees) {
                    paymentsToCreate.push({
                        household: household._id,
                        fee: fee._id,
                        amount: fee.amount,
                        paymentDate: new Date(new Date().getFullYear(), 5, Math.floor(Math.random() * 6) + 1), // Ng√†y 1-6 th√°ng 6
                        period: new Date(new Date().getFullYear(), 5, 1),
                        method: 'cash',
                        status: Math.random() < 0.95 ? 'paid' : 'pending', // 95% ƒë√£ thanh to√°n, 5% ƒëang ch·ªù
                        note: `Thanh to√°n ${fee.name} - Th√°ng 6/${new Date().getFullYear()}`
                    });
                }
            }
        }

        // Th√™m thanh to√°n ph√≠ ƒë√≥ng g√≥p cho 15% h·ªô gia ƒë√¨nh
        const contributionFees = fees.filter(fee => fee.feeType === 'contribution');

        if (contributionFees.length > 0) {
            const contributionHouseholds = allHouseholds
                .sort(() => 0.5 - Math.random())
                .slice(0, Math.floor(allHouseholds.length * 0.15));

            for (const household of contributionHouseholds) {
                for (const fee of contributionFees) {
                    paymentsToCreate.push({
                        household: household._id,
                        fee: fee._id,
                        amount: fee.amount,
                        paymentDate: new Date(new Date().getFullYear(), 5, Math.floor(Math.random() * 6) + 1), // Ng√†y 1-6 th√°ng 6
                        period: new Date(new Date().getFullYear(), 5, 1),
                        method: 'bank_transfer',
                        status: Math.random() < 0.9 ? 'paid' : 'pending', // 90% ƒë√£ thanh to√°n, 10% ƒëang ch·ªù
                        note: `Thanh to√°n ${fee.name} - Th√°ng 6/${new Date().getFullYear()}`
                    });
                }
            }
        }

        // X√≥a thanh to√°n c≈©
        await Payment.deleteMany({});

        // Th√™m thanh to√°n m·ªõi theo batch ƒë·ªÉ tr√°nh l·ªói
        console.log(`üíæ ƒêang l∆∞u ${paymentsToCreate.length} thanh to√°n...`);

        const batchSize = 100;
        const totalPayments = [];

        for (let i = 0; i < paymentsToCreate.length; i += batchSize) {
            const batch = paymentsToCreate.slice(i, i + batchSize);
            try {
                const batchResult = await Payment.insertMany(batch, { ordered: false });
                totalPayments.push(...batchResult);
                console.log(`‚úÖ ƒê√£ l∆∞u batch ${Math.floor(i / batchSize) + 1}/${Math.ceil(paymentsToCreate.length / batchSize)}`);
            } catch (error) {
                console.log(`‚ö†Ô∏è M·ªôt s·ªë thanh to√°n trong batch ${Math.floor(i / batchSize) + 1} b·ªã tr√πng l·∫∑p, b·ªè qua...`);
            }
        }

        console.log(`‚úÖ ƒê√£ t·∫°o ${totalPayments.length} thanh to√°n th√†nh c√¥ng`);

        // Th·ªëng k√™ cu·ªëi c√πng
        console.log('\nüìä TH·ªêNG K√ä T·ªîNG K·∫æT:');

        const finalHouseholdCount = await Household.countDocuments({ active: true });
        const finalResidentCount = await Resident.countDocuments({ active: true });
        const finalPaymentCount = await Payment.countDocuments({ status: 'paid' });
        const finalFeeCount = await Fee.countDocuments({ active: true });

        console.log(`üè† T·ªïng s·ªë h·ªô gia ƒë√¨nh: ${finalHouseholdCount}`);
        console.log(`üë• T·ªïng s·ªë c∆∞ d√¢n: ${finalResidentCount}`);
        console.log(`üí∞ T·ªïng s·ªë thanh to√°n: ${finalPaymentCount}`);
        console.log(`üìã T·ªïng s·ªë lo·∫°i ph√≠: ${finalFeeCount}`);

        // Th·ªëng k√™ doanh thu th√°ng hi·ªán t·∫°i
        const currentMonthStart = new Date();
        currentMonthStart.setDate(1);
        currentMonthStart.setHours(0, 0, 0, 0);

        const currentMonthEnd = new Date();
        currentMonthEnd.setMonth(currentMonthEnd.getMonth() + 1);
        currentMonthEnd.setDate(0);
        currentMonthEnd.setHours(23, 59, 59, 999);

        const currentMonthPayments = await Payment.find({
            paymentDate: { $gte: currentMonthStart, $lte: currentMonthEnd },
            status: 'paid'
        });

        const currentMonthRevenue = currentMonthPayments.reduce((sum, p) => sum + p.amount, 0);
        console.log(`üíµ Doanh thu th√°ng hi·ªán t·∫°i: ${currentMonthRevenue.toLocaleString()} VND`);
        console.log(`üìà S·ªë thanh to√°n th√°ng hi·ªán t·∫°i: ${currentMonthPayments.length}`);

        // Th·ªëng k√™ doanh thu th√°ng 6 ƒë·∫øn ng√†y 6/6
        const june6Start = new Date(new Date().getFullYear(), 5, 1); // 1/6
        const june6End = new Date(new Date().getFullYear(), 5, 6, 23, 59, 59, 999); // 6/6

        const june6Payments = await Payment.find({
            paymentDate: { $gte: june6Start, $lte: june6End },
            status: 'paid'
        }).populate('fee').populate('household');

        const june6Revenue = june6Payments.reduce((sum, p) => sum + p.amount, 0);

        console.log('\nüìä TH·ªêNG K√ä DOANH THU TH√ÅNG 6 (ƒë·∫øn ng√†y 6/6):');
        console.log(`üí∞ T·ªïng s·ªë thanh to√°n: ${june6Payments.length}`);
        console.log(`üíµ T·ªïng doanh thu: ${june6Revenue.toLocaleString()} VND`);

        // Th·ªëng k√™ theo lo·∫°i ph√≠
        const revenueByFeeType = {};
        for (const payment of june6Payments) {
            const feeType = payment.fee.feeType;
            if (!revenueByFeeType[feeType]) {
                revenueByFeeType[feeType] = 0;
            }
            revenueByFeeType[feeType] += payment.amount;
        }

        console.log('\n--- Doanh thu theo lo·∫°i ph√≠ ---');
        for (const [feeType, amount] of Object.entries(revenueByFeeType)) {
            let feeTypeName;
            switch (feeType) {
                case 'mandatory': feeTypeName = 'Ph√≠ b·∫Øt bu·ªôc'; break;
                case 'voluntary': feeTypeName = 'Ph√≠ t·ª± nguy·ªán'; break;
                case 'contribution': feeTypeName = 'Ph√≠ ƒë√≥ng g√≥p'; break;
                case 'parking': feeTypeName = 'Ph√≠ g·ª≠i xe'; break;
                case 'utilities': feeTypeName = 'Ph√≠ ti·ªán √≠ch'; break;
                default: feeTypeName = feeType;
            }
            console.log(`${feeTypeName}: ${amount.toLocaleString()} VND`);
        }

        // Th·ªëng k√™ c√°c kho·∫£n thanh to√°n qu√° h·∫°n
        const overduePayments = await Payment.find({
            status: 'overdue'
        }).populate('fee').populate('household');

        const overdueAmount = overduePayments.reduce((sum, p) => sum + p.amount, 0);

        console.log('\nüìä TH·ªêNG K√ä C√ÅC KHO·∫¢N THANH TO√ÅN QU√Å H·∫†N:');
        console.log(`‚ùó T·ªïng s·ªë kho·∫£n qu√° h·∫°n: ${overduePayments.length}`);
        console.log(`üíµ T·ªïng gi√° tr·ªã qu√° h·∫°n: ${overdueAmount.toLocaleString()} VND`);

        // Th·ªëng k√™ theo lo·∫°i ph√≠
        const overdueByFeeType = {};
        for (const payment of overduePayments) {
            const feeType = payment.fee.feeType;
            if (!overdueByFeeType[feeType]) {
                overdueByFeeType[feeType] = {
                    count: 0,
                    amount: 0
                };
            }
            overdueByFeeType[feeType].count += 1;
            overdueByFeeType[feeType].amount += payment.amount;
        }

        console.log('\n--- Kho·∫£n qu√° h·∫°n theo lo·∫°i ph√≠ ---');
        for (const [feeType, data] of Object.entries(overdueByFeeType)) {
            let feeTypeName;
            switch (feeType) {
                case 'mandatory': feeTypeName = 'Ph√≠ b·∫Øt bu·ªôc'; break;
                case 'voluntary': feeTypeName = 'Ph√≠ t·ª± nguy·ªán'; break;
                case 'contribution': feeTypeName = 'Ph√≠ ƒë√≥ng g√≥p'; break;
                case 'parking': feeTypeName = 'Ph√≠ g·ª≠i xe'; break;
                case 'utilities': feeTypeName = 'Ph√≠ ti·ªán √≠ch'; break;
                default: feeTypeName = feeType;
            }
            console.log(`${feeTypeName}: ${data.count} kho·∫£n - ${data.amount.toLocaleString()} VND`);
        }

        // ƒê·∫øm s·ªë h·ªô gia ƒë√¨nh c√≥ kho·∫£n qu√° h·∫°n
        const householdsWithOverdue = [...new Set(overduePayments.map(p => p.household._id.toString()))];
        console.log(`üè† S·ªë h·ªô gia ƒë√¨nh c√≥ kho·∫£n qu√° h·∫°n: ${householdsWithOverdue.length}/${allHouseholds.length} (${Math.round(householdsWithOverdue.length / allHouseholds.length * 100)}%)`);

        // ƒê·∫øm s·ªë h·ªô gia ƒë√¨nh c√≥ kho·∫£n qu√° h·∫°n nh∆∞ng ƒë√£ thanh to√°n th√°ng hi·ªán t·∫°i
        const householdsWithOverdueAndCurrentPaid = [];
        for (const householdId of householdsWithOverdue) {
            const hasCurrentPaid = await Payment.exists({
                household: householdId,
                status: 'paid',
                paymentDate: { $gte: june6Start, $lte: june6End }
            });

            if (hasCurrentPaid) {
                householdsWithOverdueAndCurrentPaid.push(householdId);
            }
        }

        console.log(`üè† S·ªë h·ªô gia ƒë√¨nh c√≥ kho·∫£n qu√° h·∫°n nh∆∞ng ƒë√£ thanh to√°n th√°ng hi·ªán t·∫°i: ${householdsWithOverdueAndCurrentPaid.length}/${householdsWithOverdue.length} (${Math.round(householdsWithOverdueAndCurrentPaid.length / householdsWithOverdue.length * 100)}%)`);

    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o d·ªØ li·ªáu:', error);
        throw error;
    }
}

// H√†m t·∫°o c√°c lo·∫°i ph√≠
async function createFees() {
    console.log('üí≤ Ki·ªÉm tra v√† t·∫°o c√°c lo·∫°i ph√≠...');

    try {
        // Ki·ªÉm tra xem ƒë√£ c√≥ lo·∫°i ph√≠ n√†o ch∆∞a
        const feeCount = await Fee.countDocuments();

        if (feeCount > 0) {
            console.log(`‚úÖ ƒê√£ c√≥ ${feeCount} lo·∫°i ph√≠, b·ªè qua b∆∞·ªõc n√†y.`);
            return;
        }

        // T·∫°o c√°c lo·∫°i ph√≠
        const fees = [
            {
                feeCode: 'PHI001',
                name: 'Ph√≠ qu·∫£n l√Ω h√†ng th√°ng',
                amount: 500000,
                feeType: 'mandatory',
                description: 'Ph√≠ qu·∫£n l√Ω h√†ng th√°ng cho m·ªói cƒÉn h·ªô',
                startDate: new Date('2023-01-01'),
                active: true
            },
            {
                feeCode: 'PHI002',
                name: 'Ph√≠ g·ª≠i xe √¥ t√¥',
                amount: 1200000,
                feeType: 'parking',
                description: 'Ph√≠ g·ª≠i xe √¥ t√¥ h√†ng th√°ng',
                startDate: new Date('2023-01-01'),
                active: true
            },
            {
                feeCode: 'PHI003',
                name: 'Ph√≠ g·ª≠i xe m√°y',
                amount: 100000,
                feeType: 'parking',
                description: 'Ph√≠ g·ª≠i xe m√°y h√†ng th√°ng',
                startDate: new Date('2023-01-01'),
                active: true
            },
            {
                feeCode: 'PHI004',
                name: 'Ph√≠ s·ª≠a ch·ªØa c√¥ng tr√¨nh chung',
                amount: 200000,
                feeType: 'contribution',
                description: 'Ph√≠ ƒë√≥ng g√≥p cho vi·ªác s·ª≠a ch·ªØa c√°c c√¥ng tr√¨nh chung',
                startDate: new Date('2023-06-01'),
                endDate: new Date('2023-12-31'),
                active: true
            }
        ];

        await Fee.insertMany(fees);
        console.log(`‚úÖ ƒê√£ t·∫°o ${fees.length} lo·∫°i ph√≠.`);
    } catch (error) {
        console.error('‚ùå L·ªói khi t·∫°o lo·∫°i ph√≠:', error);
        throw error;
    }
}